<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.dong.catdogMapper">



	<!-- 로그인 -->
	<select id="login" parameterType="java.util.Map"
		resultType="java.util.Map">
		Select user_id, name, user_auth
		From member
		Where
		user_id=#{user_id} and password=#{password}
	</select>

	<!-- 카테고리 리스트 -->
	<select id="mainlist" parameterType="java.util.Map"
		resultType="ProductDTO">
		SELECT
		p.*,
		(SELECT wish_no
		FROM wish w
		WHERE w.user_id =
		#{user_id} AND w.product_code = p.product_code) AS
		wish_no
		FROM
		product p
		WHERE
		p.product_category = #{product_category}
		ORDER BY
		p.product_regdate DESC
	</select>

	<!-- 리스트에서 제품 선택 -->
	<select id="product_detail" parameterType="java.lang.Integer"
		resultType="BoardDTO">
		select *
		from product
		where product_code = #{product_code}
	</select>

	<insert id="addWish" parameterType="java.util.Map">
		INSERT INTO wish (user_id,
		product_code)
		VALUES (#{user_id}, #{product_code})
	</insert>

	<delete id="deleteWish" parameterType="java.util.Map">
		DELETE FROM wish
		WHERE
		user_id = #{user_id} AND product_code = #{product_code}
	</delete>

	<!-- 찜 추가 제거 -->
	<!-- <insert id="addWish" parameterType="WishDTO"> insert into wish values 
		(#{user_id}, #{product_code}) </insert> <delete id="deleteWish" parameterType="WishDTO"> 
		delete from wish where user_id=#{user_id} and product_code = #{product_code} 
		</delete> -->

	<!-- 사용자 찜 목록 조회 -->
	<select id="getWish" parameterType="java.util.Map"
		resultType="ProductDTO">
		SELECT
		p.*,
		(SELECT wish_no
		FROM wish w
		WHERE w.user_id =
		#{user_id} AND w.product_code = p.product_code) AS
		wish_no
		FROM
		product p
		WHERE
		p.product_category = #{product_category}
		ORDER BY
		p.product_regdate DESC
	</select>

	<!-- 장바구니 통합쓰 ㅋㅋㅋ -->
	<select id="getCartInfo" parameterType="java.lang.String"
		resultType="CartDTO">
		SELECT
		c.user_id,
		c.product_code,
		p.thumbnail_img,
		p.product_name,
		c.cart_quantity,
		p.product_price,
		(c.cart_quantity *
		p.product_price) AS totalPrice
		FROM cart c LEFT JOIN product p ON
		c.product_code = p.product_code
		WHERE
		c.user_id = #{user_id}
	</select>

	<!-- 장바구니 아이템 삭제 -->
	<delete id="deleteCart" parameterType="CartDTO">
		DELETE FROM cart
		WHERE
		user_id = #{user_id} and product_code = #{product_code}
	</delete>

	<!-- <select id="getCartInfo" parameterType="java.lang.String" resultType="CartDTO"> 
		SELECT product_code, cart_quantity FROM cart WHERE user_id = #{user_id} </select> 
		장바구니 상품 정보 <select id="getCartItem" parameterType="java.lang.String" resultType="CartDTO"> 
		SELECT p.thumbnail_img, p.product_name, p.product_price, (p.product_price 
		* c.cart_quantity) as totalPrice FROM cart c LEFT JOIN product p ON c.product_code 
		= p.product_code WHERE c.user_id = #{user_id} </select> -->

	<!-- 마이페이지 주문 내역 -->
	<select id="getMyOrders" parameterType="java.lang.String"
		resultType="MyDTO">
		SELECT
		o.ordered_at AS orderedAt,
		o.order_code AS orderCode,
		(SELECT p.product_name
		FROM order_item oi
		JOIN product p ON
		oi.product_code = p.product_code
		WHERE oi.order_code = o.order_code
		ORDER BY oi.product_code ASC
		LIMIT 1) AS firstProductName,
		(SELECT
		SUM(p.product_price *
		oi.order_quantity)
		FROM order_item oi
		JOIN product
		p ON oi.product_code = p.product_code
		WHERE oi.order_code =
		o.order_code) AS totalPrice,
		o.payment_status AS
		paymentStatus

		FROM
		orders o

		WHERE
		o.user_id_fk = #{user_id}
		ORDER BY
		o.ordered_at DESC
	</select>

	<resultMap id="orderResultMap" type="OrderDTO">
		<result property="orderCode" column="order_code" />
		<result property="userIdFk" column="user_id_fk" />
		<result property="orderedAt" column="ordered_at" />
		<result property="productCost" column="product_cost" />
		<result property="paymentStatus" column="payment_status" />
	</resultMap>
	<!-- 최근 주문 내역 -->
	<select id="getRecentOrders" parameterType="java.util.Map"
		resultMap="orderResultMap">
		SELECT
		order_code,
		user_id_fk,
		ordered_at,
		product_cost,
		payment_status
		FROM orders
		WHERE user_id_fk = #{user_id}
		ORDER BY
		ordered_at DESC
	</select>

	<resultMap id="orderDetailMap"
		type="kr.co.dong.catdog.OrderDetailDTO">
		<!-- 주문 정보 -->
		<result property="orderCode" column="orderCode" />
		<result property="userId" column="userId" />
		<result property="name" column="name" />
		<result property="orderedAt" column="orderedAt" />

		<!-- 배송지 정보 -->
		<result property="zipcode" column="zipcode" />
		<result property="address" column="address" />
		<result property="detailAddress" column="detailAddress" />

		<!-- 상품 리스트 -->
		<collection property="orderItems"
			ofType="kr.co.dong.catdog.OrderItemDTO">
			<result property="thumbnailImg" column="thumbnail_img" />
			<result property="productName" column="product_name" />
			<result property="orderQuantity" column="order_quantity" />
			<result property="totalPrice" column="total_price" />
			<result property="orderStatus" column="order_Status" />
		</collection>
	</resultMap>

	<select id="getOrderDetail" parameterType="java.lang.String"
		resultMap="orderDetailMap">
		SELECT
		o.order_code AS orderCode,
		o.user_id_fk AS userId,
		o.ordered_at AS orderedAt,

		m.name AS name,
		m.zipcode AS zipcode,
		m.address AS address,
		m.detailaddress AS detailAddress,

		p.thumbnail_img
		AS thumbnailImg,
		p.product_name AS
		productName,
		oi.order_quantity AS
		orderQuantity,
		(p.product_price *
		oi.order_quantity) AS totalPrice,
		oi.order_status AS orderStatus
		FROM
		orders o
		LEFT JOIN member m ON
		o.user_id_fk = m.user_id
		LEFT JOIN order_item oi ON o.order_code =
		oi.order_code
		LEFT JOIN product p ON
		oi.product_code = p.product_code
		WHERE
		o.order_code = #{order_code}
		ORDER BY
		oi.product_code ASC;
	</select>

	<!-- 총합 -->
	<select id="getTotalCost" parameterType="java.lang.String"
		resultType="java.lang.Integer">
		SELECT
		sum(p.product_price * oi.order_quantity) as totalCost
		FROM
		order_item oi
		LEFT JOIN product p ON oi.product_code =
		p.product_code
		WHERE
		oi.order_code = #{order_code}
	</select>

	<!-- 상품 주문 리스트 -->
	<select id="getOrderItemDetail" parameterType="java.lang.String"
		resultType="OrderItemDetailDTO">
		SELECT
		p.product_code as productCode,
		p.product_name as
		productName,
		p.thumbnail_img as thumbnailImg,
		oi.order_quantity as
		orderQuantity,
		(p.product_price * oi.order_quantity) as totalPrice,
		oi.order_status as orderStatus
		FROM
		order_item oi
		LEFT JOIN product p ON
		oi.product_code = p.product_code
		WHERE
		oi.order_code = #{order_code}
	</select>

	<!-- 주문 상품 후기 정보 -->
	<select id="getReivew" parameterType="java.lang.Integer"
		resultType="ReviewDTO">
		SELECT
		r.review_no
		r.product_code
		r.user_id
		r.content
		r.rating
		FROM review r
		WHERE r.product_code in (SELECT product_code
		FROM
		order_item
		WHERE order_code = #{order_code})
	</select>

	<!-- 장바구니에서 주문하기 -->
	<insert id="addOrder" parameterType="OrderDTO"
		useGeneratedKeys="true" keyProperty="order_code">
		INSERT INTO
		orders(order_code,
		user_id_fk, payment_status)
		VALUES (#{order_code},
		#{user_id_fk}, "0")
	</insert>

	<!-- 장바구니에서 주문 아이템 추가하기 -->
	<insert id="addOrderItems" parameterType="list">
		INSERT INTO
		order_item (order_code, product_code, order_quantity)
		VALUES
		<foreach collection="list" item="item" separator=",">
			(#{item.order_code}, #{item.product_code}, #{item.order_quantity})
		</foreach>
		;
	</insert>

</mapper>