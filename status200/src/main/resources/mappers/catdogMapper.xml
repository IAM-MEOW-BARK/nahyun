<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.dong.catdogMapper">



	<!-- 로그인 -->
	<!-- 수정함 select user_id, name, user_auth -->
	<select id="login" parameterType="java.util.Map"
		resultType="java.util.Map">
		select user_id, name, user_auth, phone_num, zipcode,
		address, detailaddress
		From member
		Where
		user_id=#{user_id} and
		password=#{password}
	</select>

	<!-- 카테고리 리스트 -->
	<select id="mainlist" parameterType="java.lang.Integer"
		resultType="ProductDTO">
		SELECT
		*
		FROM
		product
		WHERE
		product_category =
		#{product_category}
		ORDER BY
		product_regdate DESC
		LIMIT 20
	</select>

	<!-- 리스트에서 제품 선택 -->
	<select id="product_detail" parameterType="java.lang.Integer"
		resultType="BoardDTO">
		select *
		from product
		where product_code = #{product_code}
	</select>

	<insert id="addWish" parameterType="java.util.Map">
		INSERT INTO wish (user_id,
		product_code)
		VALUES (#{user_id}, #{product_code})
	</insert>

	<delete id="deleteWish" parameterType="java.util.Map">
		DELETE FROM wish
		WHERE
		user_id = #{user_id} AND product_code = #{product_code}
	</delete>

	<!-- 사용자 찜 목록 조회 -->
	<select id="getWish" parameterType="java.util.Map"
		resultType="ProductDTO">
		SELECT
		p.*,
		(SELECT wish_no
		FROM wish w
		WHERE w.user_id =
		#{user_id} AND w.product_code = p.product_code) AS
		wish_no
		FROM
		product p
		WHERE
		p.product_category = #{product_category}
		ORDER BY
		p.product_regdate DESC
	</select>

	<!-- 장바구니 통합쓰 ㅋㅋㅋ -->
	<select id="getCartInfo" parameterType="java.lang.String"
		resultType="CartDTO">
		SELECT
		c.user_id,
		c.product_code,
		p.thumbnail_img,
		p.product_name,
		c.cart_quantity,
		p.product_price,
		(c.cart_quantity *
		p.product_price) AS totalPrice
		FROM cart c LEFT JOIN product p ON
		c.product_code = p.product_code
		WHERE
		c.user_id = #{user_id}
	</select>

	<select id="getCartCost" parameterType="java.lang.String"
		resultType="java.lang.Integer">
		SELECT
		coalesce(sum(p.product_price * c.cart_quantity), 0)
		as cartCost
		FROM
		cart c LEFT JOIN product p
		ON c.product_code =
		p.product_code
		WHERE
		c.user_id = #{user_id}
	</select>

	<!-- 마이페이지 주문 내역 -->
	<select id="getMyOrders" parameterType="java.util.Map"
		resultType="MyDTO">
		SELECT
		o.ordered_at AS orderedAt,
		o.order_code AS orderCode,
		(SELECT
		p.product_name
		FROM order_item oi
		JOIN product p ON
		oi.product_code =
		p.product_code
		WHERE oi.order_code = o.order_code
		ORDER BY
		oi.product_code ASC
		LIMIT 1) AS firstProductName,
		(SELECT
		SUM(p.product_price *
		oi.order_quantity)
		FROM order_item oi
		JOIN product
		p ON oi.product_code = p.product_code
		WHERE oi.order_code =
		o.order_code) AS totalPrice,
		o.payment_status AS
		paymentStatus

		FROM
		orders o

		WHERE
		o.user_id_fk = #{user_id}
		and o.payment_status = 1
		ORDER BY
		o.ordered_at DESC
		<if test="limit != null">
			LIMIT #{limit}
		</if>
	</select>

	<resultMap id="orderResultMap" type="OrderDTO">
		<result property="orderCode" column="order_code" />
		<result property="userIdFk" column="user_id_fk" />
		<result property="orderedAt" column="ordered_at" />
		<result property="productCost" column="product_cost" />
		<result property="paymentStatus" column="payment_status" />
	</resultMap>
	<!-- 최근 주문 내역 -->
	<select id="getRecentOrders" parameterType="java.util.Map"
		resultMap="orderResultMap">
		SELECT
		order_code,
		user_id_fk,
		ordered_at,
		product_cost,
		payment_status
		FROM orders
		WHERE user_id_fk = #{user_id}
		ORDER BY
		ordered_at DESC
	</select>

	<resultMap id="orderDetailMap"
		type="kr.co.dong.catdog.OrderDetailDTO">
		<!-- 주문 정보 -->
		<result property="orderCode" column="orderCode" />
		<result property="userId" column="userId" />
		<result property="name" column="name" />
		<result property="phoneNum" column="phoneNum" />
		<result property="orderedAt" column="orderedAt" />

		<!-- 배송지 정보 -->
		<result property="zipcode" column="zipcode" />
		<result property="address" column="address" />
		<result property="detailAddress" column="detailAddress" />

		<!-- 상품 리스트 -->
		<collection property="orderItems"
			ofType="kr.co.dong.catdog.OrderItemDTO">
			<result property="thumbnailImg" column="thumbnail_img" />
			<result property="productName" column="product_name" />
			<result property="orderQuantity" column="order_quantity" />
			<result property="totalPrice" column="total_price" />
			<result property="orderStatus" column="order_status" />
		</collection>
	</resultMap>

	<select id="getOrderDetail" parameterType="java.lang.String"
		resultMap="orderDetailMap">
		SELECT
		o.order_code AS orderCode,
		o.user_id_fk AS userId,
		o.ordered_at AS orderedAt,
		m.name AS name,
		m.phone_num AS phoneNum,
		m.zipcode AS zipcode,
		m.address AS address,
		m.detailaddress AS
		detailAddress,
		p.thumbnail_img AS thumbnailImg,
		p.product_name AS
		productName,
		oi.order_quantity AS orderQuantity,
		(p.product_price *
		oi.order_quantity) AS totalPrice,
		oi.order_status AS orderStatus
		FROM
		orders o
		LEFT JOIN member m ON o.user_id_fk = m.user_id
		LEFT JOIN
		order_item oi ON o.order_code = oi.order_code
		LEFT JOIN product p ON
		oi.product_code = p.product_code
		WHERE o.order_code = #{order_code}
		ORDER BY oi.product_code ASC;
	</select>


	<!-- 총합 결제 금액 -->
	<select id="getTotalCost" parameterType="java.lang.String"
		resultType="java.lang.Integer">
		SELECT
		sum(p.product_price * oi.order_quantity) as totalCost
		FROM
		order_item oi
		LEFT JOIN product p ON oi.product_code =
		p.product_code
		WHERE
		oi.order_code = #{order_code}
	</select>

	<!-- 상품 주문 리스트 -->
	<select id="getOrderItemDetail" parameterType="java.lang.String"
		resultType="OrderItemDetailDTO">
		SELECT
		p.product_code as productCode,
		p.product_name as
		productName,
		p.thumbnail_img as thumbnailImg,
		oi.order_quantity as
		orderQuantity,
		p.product_price as productPrice,
		(p.product_price *
		oi.order_quantity) as totalPrice,
		oi.order_status as orderStatus
		FROM
		order_item oi
		LEFT JOIN product p ON
		oi.product_code = p.product_code
		WHERE
		oi.order_code = #{order_code}
	</select>

	<!-- 주문 상품 후기 정보 -->
	<select id="getReivew" parameterType="java.lang.Integer"
		resultType="ReviewDTO">
		SELECT
		r.review_no
		r.product_code
		r.user_id
		r.content
		r.rating
		FROM review r
		WHERE r.product_code in (SELECT product_code
		FROM
		order_item
		WHERE order_code = #{order_code})
	</select>

	<!-- 장바구니에서 주문하기 -->
	<insert id="addOrder" parameterType="OrderDTO"
		useGeneratedKeys="true" keyProperty="order_code">
		INSERT INTO
		orders(order_code,
		user_id_fk, payment_status)
		VALUES (#{order_code},
		#{user_id_fk}, "0")
	</insert>

	<insert id="addOrderItems" parameterType="list">
		INSERT INTO
		order_item (order_code, product_code, order_quantity)
		VALUES
		<foreach collection="list" item="item" separator=",">
			(#{item.order_code}, #{item.product_code}, #{item.order_quantity})
		</foreach>
	</insert>

	<!-- 장바구니 삭제 -->
	<delete id="deleteCart" parameterType="CartDTO">
		DELETE FROM cart
		WHERE
		user_id = #{user_id} and product_code = #{product_code}
	</delete>

	<!-- 장바구니 수량 변경 -->
	<update id="updateCartQuantity" parameterType="CartDTO">
		UPDATE cart
		SET
		cart_quantity = #{cart_quantity}
		WHERE user_id = #{user_id}
		AND
		product_code = #{product_code}
	</update>

	<!-- 리뷰 여부 확인 -->
	<select id="isReview" parameterType="ReviewDTO"
		resultType="java.lang.Integer">
		SELECT count(*)
		FROM review
		WHERE product_code =
		#{product_code} and user_id = #{user_id}
	</select>

	<!-- 리뷰 작성 -->
	<insert id="regReview" parameterType="ReviewDTO">
		INSERT INTO review
		(product_code, user_id, review_score, review_img, review_content,
		review_date)
		VALUES (#{product_code}, #{user_id}, #{review_score},
		#{review_img},
		#{review_content}, now())
	</insert>

	<!-- 제품 코드로 제품 정보 가져오기 -->

	<select id="getProductByCode" parameterType="int"
		resultType="ProductDTO">
		SELECT *
		FROM product
		WHERE product_code = #{product_code}
	</select>

	<!-- 회원 정보 업데이트 -->

	<update id="updateProfile" parameterType="MemberDTO">
		UPDATE member
		SET
		password = #{password},
		phone_num = #{phone_num},
		zipcode = #{zipcode},
		address = #{address},
		detailaddress = #{detailaddress}
		WHERE user_id =
		#{user_id}
	</update>

	<!-- 상품 상세 -->
	<select id="getOrderInfo" parameterType="String"
		resultType="OrderItemDTO">
		SELECT
		oi.order_item_code,
		oi.order_code,
		oi.product_code,
		oi.order_status,
		oi.order_return,
		p.product_price,
		p.thumbnail_img,
		oi.order_quantity,
		(oi.order_quantity * p.product_price) AS
		total_price,
		p.product_name
		FROM order_item oi
		LEFT JOIN product p ON
		p.product_code = oi.product_code
		WHERE oi.order_code = #{order_code}
	</select>

	<!-- 결제 페이지 회원 정보 -->
	<select id="getMember" resultType="MemberDTO">
		select user_id, name,
		phone_num, zipcode, address, detailaddress
		from member
		where user_id =
		#{user_id}
	</select>

	<!-- product_code 가져오기 -->
	<select id="getProductCodeByUserId"
		parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT product_code
		FROM
		cart
		WHERE user_id = #{user_id}
	</select>

	<update id="updateAddress" parameterType="MemberDTO">
		UPDATE member
		SET name =
		#{name},
		phone_num = #{phone_num},
		zipcode = #{zipcode},
		address =
		#{address},
		detailaddress = #{detailaddress}
		WHERE user_id = #{user_id}
	</update>

	<!-- 결제 상태 변경 -->
	<update id="updatePaymentStatus"
		parameterType="java.lang.String">
		UPDATE orders
		SET payment_status = 1
		WHERE user_id_fk =
		#{user_id}
	</update>

	<!-- 주문 아이템 삭제 -->
	<delete id="deleteOrderItems" parameterType="java.util.Map">
		DELETE FROM cart
		WHERE user_id = #{user_id}
		AND product_code IN
		<foreach item="code" index="index" collection="product_code"
			open="(" separator="," close=")">
			#{code}
		</foreach>
	</delete>

	<!-- 상품 관리 리스트 -->
	<select id="getTotalProduct" resultType="ProductDTO">
		<!-- select * from product order by product_regdate desc -->
		select *
		from product
		order by product_regdate desc
		limit #{start},
		#{pageSize}
	</select>

	<!-- 상품 관리 리스트 -->
	<select id="getOrderList" resultType="MyDTO" parameterType="map">
		SELECT
		o.ordered_at AS orderedAt,
		o.order_code AS orderCode,
		(SELECT
		p.product_name
		FROM order_item oi
		JOIN product p ON
		oi.product_code =
		p.product_code
		WHERE oi.order_code = o.order_code
		ORDER BY
		oi.product_code ASC
		LIMIT 1) AS firstProductName,
		(SELECT
		SUM(p.product_price *
		oi.order_quantity)
		FROM order_item oi
		JOIN product
		p ON oi.product_code = p.product_code
		WHERE oi.order_code =
		o.order_code) AS totalPrice,
		o.payment_status AS
		paymentStatus

		FROM
		orders o

		WHERE
		o.user_id_fk = #{user_id}
		and o.payment_status = 1
		ORDER BY
		o.ordered_at DESC
		limit #{start}, #{pageSize}
	</select>


	<!-- 지혜 언니 -->
	<!-- 장바구니 추가 -->
	<insert id="addCart" parameterType="cartDTO">
		INSERT INTO cart (user_id, product_code, cart_quantity)
		VALUES (#{user_id}, #{product_code}, #{cart_quantity})
		ON DUPLICATE KEY UPDATE
		cart_quantity = cart_quantity + #{cart_quantity}
	</insert>
	<!-- 상품 상세 정보 -->
	<select id="productDetail" parameterType="java.lang.Integer"
		resultType="productDTO">
		select *
		from product
		where product_code = #{product_code}
	</select>

	<!-- 최근 리뷰 5개 리스트 -->
	<select id="getReview" parameterType="java.lang.Integer"
		resultType="ReviewDTO">
		select *
		from review
		where product_code = #{product_code}
		order by review_no desc
		limit 5
	</select>

	<!-- 상품 상세 리뷰 개수 -->
	<select id="product_reviewTotal" resultType="java.lang.Integer">
		select count(*)
		from review
		where product_code = #{product_code}
	</select>

	<!-- 최근 Q&A 5개 리스트 -->
	<select id="getQna" parameterType="java.lang.Integer"
		resultType="QnaDTO">
		select *
		from qna
		where product_code_fk = #{product_code}
		order by qna_no desc
		limit 5
	</select>

	<!-- 상품 상세 Q&A 개수 -->
	<select id="product_qnaTotal" resultType="java.lang.Integer">
		select count(*)
		from qna
		where product_code_fk = #{product_code}
	</select>

	<!-- 카테고리 리스트 -->
	<select id="categoryList" resultType="ProductDTO">
		select *
		from product
		WHERE product_category = #{product_category}
		order by product_regdate desc
		limit #{start}, #{pageSize}
	</select>

	<!-- 카테고리 페이징 -->
	<select id="categoryTotalPost" parameterType="java.lang.Integer"
		resultType="java.lang.Integer">
		select count(*) from product WHERE product_category =
		#{product_category}
	</select>

	<!-- 공지사항 리스트 -->
	<select id="noticeList" parameterType="map"
		resultType="NoticeDTO">
		select *
		from notice
		order by notice_no desc
		limit #{start}, #{pageSize}
	</select>

	<!-- 공지사항 페이징 -->
	<select id="noticeTotalPost" resultType="java.lang.Integer">
		select count(*)
		from
		notice;
	</select>

	<!-- 리뷰 리스트 -->
	<select id="reviewList" parameterType="map"
		resultType="ReviewDTO">
		select r.*, p.product_name
		from review r left join product p
		on r.product_code = p.product_code

		order by review_no desc
		limit #{start}, #{pageSize}
	</select>

	<!-- 리뷰 페이징 -->
	<select id="reviewTotalPost" resultType="java.lang.Integer">
		select count(*)
		from
		review;
	</select>

	<!-- Q&A 리스트 -->
	<select id="qnaList" parameterType="map" resultType="QnaDTO">
		select *
		from qna
		order by qna_no desc
		limit #{start}, #{pageSize}
	</select>

	<!-- Q&A 페이징 -->
	<select id="qnaTotalPost" resultType="java.lang.Integer">
		select count(*)
		from qna;
	</select>

	<!-- FAQ 리스트 -->
	<select id="faqList" parameterType="map" resultType="FaqDTO">
		select *
		from faq
		order by faq_no desc
		limit #{start}, #{pageSize}
	</select>

	<!-- FAQ 페이징 -->
	<select id="faqTotalPost" resultType="java.lang.Integer">
		select count(*)
		from faq;
	</select>

	<!-- FAQ 구분 리스트 -->
	<select id="faqTotalPostDivision"
		parameterType="java.lang.Integer" resultType="java.lang.Integer">
		SELECT COUNT(*)
		FROM faq
		WHERE faq_division = #{faq_division}
	</select>

	<!-- FAQ 구분 페이징 -->
	<select id="faqListDivision" parameterType="map"
		resultType="FaqDTO">
		SELECT *
		FROM faq
		WHERE faq_division = #{faq_division}
		ORDER BY faq_no DESC
		LIMIT #{start}, #{pageSize}
	</select>

	<!-- 공지사항 상세 글 조회 -->
	<select id="noticeDetail" parameterType="java.lang.Integer"
		resultType="NoticeDTO">
		select *
		from notice
		where notice_no = #{notice_no}
	</select>

	<!-- 공지사항 조회수 1 증가하는 SQL -->
	<update id="noticeUpdateReadCnt"
		parameterType="java.lang.Integer">
		update notice
		set notice_readcnt = notice_readcnt + 1
		where notice_no = #{notice_no}
	</update>

	<!-- 리뷰 상세 글 조회 -->
	<select id="reviewDetail" parameterType="java.lang.Integer"
		resultType="ReviewDTO">
		select r.*, p.product_name
		from review r left join product p
		on r.product_code = p.product_code
		where review_no = #{review_no}
	</select>

	<!-- 리뷰 조회수 1 증가하는 SQL -->
	<update id="reviewUpdateReadCnt"
		parameterType="java.lang.Integer">
		update review
		set review_readcnt = review_readcnt + 1
		where review_no = #{review_no}
	</update>

	<!-- Q&A 상세 글 조회 <select id="qnaDetail" parameterType="java.lang.Integer" 
		resultType="QnaDTO"> select q.*, p.product_name from qna q left join product 
		p on q.product_code_fk = p.product_code where q.qna_no = #{qna_no} </select> -->
	<select id="qnaDetail" parameterType="map" resultType="QnaDTO">
		select q.*, p.product_name
		from qna q
		left join product p on q.product_code_fk = p.product_code
		where q.qna_no = #{qna_no}

	</select>

	<!-- FAQ 상세 조회 -->
	<select id="faqDetail" parameterType="java.lang.Integer"
		resultType="FaqDTO">
		select *
		from faq
		where faq_no = #{faq_no}
	</select>

	<!-- 공지사항 글 작성하는 SQL -->
	<insert id="noticeRegister" parameterType="NoticeDTO">
		insert into
		notice(notice_no, notice_title, notice_content, notice_date,
		notice_readcnt)
		values (#{notice_no}, #{notice_title},
		#{notice_content}, now(), #{notice_readcnt})
	</insert>

	<!-- 공지사항 글 수정하는 SQL -->
	<update id="noticeUpdate" parameterType="NoticeDTO">
		update notice
		set
		notice_title = #{notice_title}, notice_content = #{notice_content}
		where notice_no = #{notice_no}
	</update>

	<!-- 공지사항 글 삭제하는 SQL -->
	<delete id="noticeDelete" parameterType="java.lang.Integer">
		delete from notice
		where
		notice_no = #{notice_no}
	</delete>

	<!-- Q&A 글 작성하는 SQL -->
	<insert id="qnaRegister" parameterType="QnaDTO">
		insert into qna(
		product_code_fk, user_id, qna_content, qna_secret, qna_date, qna_pwd)
		values ( #{product_code_fk}, #{user_id}, #{qna_content},
		#{qna_secret}, curdate(), #{qna_pwd})
	</insert>

	<!-- Q&A 글 수정하는 SQL -->
	<update id="qnaUpdate" parameterType="QnaDTO">
		update qna
		set
		product_code_fk=#{product_code_fk}, qna_content=#{qna_content},
		qna_secret=#{qna_secret}, qna_date=curdate(), qna_pwd=#{qna_pwd}
		where
		qna_no = #{qna_no}
	</update>

	<!-- Q&A 글 삭제하는 SQL -->
	<delete id="qnaDelete" parameterType="java.lang.Integer">
		delete from qna
		where qna_no
		= #{qna_no}
	</delete>

	<!-- Q&A 글 답변 작성하는 SQL -->
	<update id="qnaReply" parameterType="QnaDTO">
		update qna
		set qna_reply =
		#{qna_reply}
		where qna_no = #{qna_no}
	</update>

	<!-- Q&A 답변 수정 -->
	<update id="qnaReplyUpdate" parameterType="QnaDTO">
		update qna
		set
		qna_reply = #{qna_reply}
		where qna_no = #{qna_no}
	</update>

	<!-- Q&A 답변 삭제 -->
	<update id="qnaReplyDelete" parameterType="java.lang.Integer">
		update qna
		set
		qna_reply = null
		where qna_no = #{qna_no}
	</update>

	<!-- 상품검색 -->
	<select id="productSearch" resultType="ProductDTO">
		select product_code, product_name, thumbnail_img
		from product
		where product_name LIKE CONCAT('%', #{keyword}, '%')
	</select>
	<!-- <select id="productTotal" resultType="java.lang.Integer"> select count(*) 
		from product; </select> -->
	<!-- FAQ 글 작성하는 SQL -->
	<insert id="faqRegister" parameterType="FaqDTO">
		insert into faq(faq_no,
		faq_division, faq_question, faq_reply)
		values (#{faq_no},
		#{faq_division}, #{faq_question}, #{faq_reply})
	</insert>



	<!-- FAQ 글 수정하는 SQL -->
	<update id="faqUpdate" parameterType="FaqDTO">
		update faq
		set faq_division
		= #{faq_division}, faq_question = #{faq_question}, faq_reply =
		#{faq_reply}
		where faq_no = #{faq_no}
	</update>

	<!-- FAQ 글 삭제하는 SQL -->
	<delete id="faqDelete" parameterType="java.lang.Integer">
		delete from faq
		where faq_no
		= #{faq_no}
	</delete>

</mapper>